name: SonarCloud analysis
on:
  push:
    branches: [ "main" ]  
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  pull-requests: read
jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
        
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        
      - name: Restore
        run: dotnet restore NetSdrClient.sln
        
      - name: Test with Coverage
        run: dotnet test NetSdrClient.sln --collect:"XPlat Code Coverage" --results-directory "TestResults" --logger "console;verbosity=detailed" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        
      
      - name: SonarScanner Begin
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
          dotnet sonarscanner begin `
            /k:"8540675-star_NetSdrClient" `
            /o:"8540675-star" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            # КРОК 3: Ми вказуємо Sonar новий шлях до звіту
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**/Program.cs" `
            /d:sonar.cpd.cs.minimumTokens=40 `
            /d:sonar.cpd.cs.minimumLines=5 `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/sonarcloud.yml,**/TestResults/**" `
            /d:sonar.qualitygate.wait=false
        shell: pwsh
        
      - name: Build
        run: dotnet build NetSdrClient.sln -c Release --no-restore
        
      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
